---

AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: "Simple pet shop backend using Lambda + API Gateway"

Resources:
  ### API Gateway ###
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: pet-shop-api.yaml
      StageName: Prod
      Variables:
        AdminApiFunctionName: !Ref AdminApiFunction
        SignedUrlFunctionName: !Ref SignedUrlFunction

  #
  # ---------- Admin API ----------
  #
  AdminApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: index.handler
      Runtime: nodejs6.10
      Role: !GetAtt LambdaPetStoreRole.Arn
      Environment:
        Variables:
          TABLE_NAME:
            !Ref DDBTable
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  AdminApiPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGatewayApi
      - AdminApiFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AdminApiFunction
      Principal: apigateway.amazonaws.com

  ### DynamoDB Table ###
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: uuid
          AttributeType: S
      KeySchema:
        -
          AttributeName: uuid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "my-pet-shop"

  ### IAM ###
  LambdaPetStoreRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: 
              - sts:AssumeRole
            Principal:
              Service: 
                - lambda.amazonaws.com

  LambdaRWDDBPolicy:
    Type: AWS::IAM::Policy
    DependsOn: LambdaPetStoreRole
    Properties:
      PolicyName: LambdaPetStorePolicy
      Roles:
        - !Ref LambdaPetStoreRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          -
            Effect:   "Allow"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/my-pet-shop"
            Action:
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:Scan"
              - "dynamodb:UpdateItem"

  #
  # ---------- Image Processing ----------
  #
  ImageUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: jkahn-my-pet-shop-image-upload
      CorsConfiguration:
        CorsRules:
          - 
            AllowedMethods: [ PUT ]
            AllowedOrigins: ['http://localhost:8080']
            AllowedHeaders: ['*']
      # TODO: update allowed origins
      # TODO: add bucket policy: https://aws.amazon.com/blogs/security/how-to-restrict-amazon-s3-bucket-access-to-a-specific-iam-role/

  SignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: image-processor/signedurl
      Handler: index.handler
      Runtime: nodejs6.10
      Role: !GetAtt SignedUrlFunctionRole.Arn
      Environment:
        Variables:
          UPLOAD_BUCKET: !Ref ImageUploadBucket
          EXPIRATION_TIME: 300
      Events:
        GetUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /images/signedurl
            Method: GET

  SignedUrlFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: 
              - sts:AssumeRole
            Principal:
              Service: 
                - lambda.amazonaws.com

  SignedUrlFunctionPolicy:
    Type: AWS::IAM::Policy
    DependsOn: SignedUrlFunctionRole
    Properties:
      PolicyName: LambdaPetStoreSignedUrlFunctionPolicy
      Roles:
        - !Ref SignedUrlFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          -
            Effect:   "Allow"
            Resource:
              - !Sub arn:aws:s3:::${ImageUploadBucket}/*
            Action:
              - "s3:Put*"

  # ImageSourceBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: jkahn-my-pet-shop-images

  # StartStateMachineFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: image-processor/state-machine
  #     Handler: index.handler
  #     Runtime: nodejs6.10
  #     Environment:
  #       Variables:
  #         STATE_MACHINE:
  #           !Ref DDBTable
  #     Events:
  #       PhotoUpload:
  #         Type: S3
  #         Properties:
  #           Bucket: !Ref ImageUploadBucket
  #           Events: s3:ObjectCreated:*

Outputs:
  ApiUrl:
    Description: API Endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/Prod'
